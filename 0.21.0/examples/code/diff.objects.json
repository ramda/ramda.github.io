{"title":"diffing objects","description":"similar to Guava's Maps.Difference.\nSee http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Maps.html#difference%28java.util.Map,%20java.util.Map%29\n","source":"let R = require('ramda');\n\nvar groupObjBy = curry(pipe(\n  // Call groupBy with the object as pairs, passing only the value to the key function\n  useWith(groupBy, [useWith(__, [last]), toPairs]),\n  map(fromPairs)\n))\n\nvar diffObjs = pipe(\n  useWith(mergeWith(merge), [map(objOf(\"leftValue\")), map(objOf(\"rightValue\"))]),\n  groupObjBy(cond([\n    [\n      both(has(\"leftValue\"), has(\"rightValue\")),\n      pipe(values, ifElse(apply(equals), always(\"common\"), always(\"difference\")))\n    ],\n    [has(\"leftValue\"), always(\"onlyOnLeft\")],\n    [has(\"rightValue\"), always(\"onlyOnRight\")],\n  ])),\n  evolve({\n    common: map(prop(\"leftValue\")),\n    onlyOnLeft: map(prop(\"leftValue\")),\n    onlyOnRight: map(prop(\"rightValue\"))\n  })\n);\n\ndiffObjs({a: 1, c: 5, d: 4 }, {a: 1, b: 2, d: 7});\n"}